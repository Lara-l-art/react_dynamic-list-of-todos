{"version":3,"sources":["api.js","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["apiUrl","getUserbyId","id","fetch","then","response","json","TodoList","state","query","checked","values","selected","handleChange","event","setState","target","value","this","props","todos","selectUser","needTodos","filter","todo","title","userId","completed","className","type","placeholder","onChange","item","insensitiveQuery","toLowerCase","includes","map","key","onClick","readOnly","React","Component","CurrentUser","user","chooseNewUser","person","data","prevProps","prevState","snapshot","name","email","phone","App","selectedUserId","tasks","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.03203d71.chunk.js","sourcesContent":["const apiUrl = `https://mate-api.herokuapp.com`;\n\nexport function getTodos() {\n  return fetch(`${apiUrl}/todos`).then(response => response.json());\n}\n\nexport function getUserbyId(id) {\n  return fetch(`${apiUrl}/users/${id}`).then(response => response.json());\n}\n","import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\n\nexport class TodoList extends React.Component {\n  state = {\n    query: '',\n    checked: false,\n    values: [],\n    selected: '',\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      selected: event.target.value,\n    });\n  }\n\n  render() {\n    const { todos, selectUser } = this.props;\n    const { query, checked, values, selected } = this.state;\n    const needTodos = todos\n      .filter(todo => todo.title !== '' && todo.userId !== null)\n      .filter((todo) => {\n        if (selected === 'active') {\n          return todo.completed === false;\n        }\n\n        if (selected === 'completed') {\n          return todo.completed === true;\n        }\n\n        return todo;\n      });\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <input\n          type=\"text\"\n          id=\"search-query\"\n          placeholder=\"Type search word\"\n          value={this.state.query}\n          onChange={(event) => {\n            this.setState({\n              query: event.target.value,\n            });\n          }}\n        />\n\n        <select\n          value={this.state.selected}\n          onChange={this.handleChange}\n        >\n          <option value=\"\">chose your variant</option>\n          <option\n            value=\"all\"\n          >\n            all\n          </option>\n          <option\n            value=\"active\"\n          >\n            active\n          </option>\n          <option\n            value=\"completed\"\n          >\n            completed\n          </option>\n        </select>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {needTodos\n              .filter((item) => {\n                const insensitiveQuery = query.toLowerCase();\n                const insensitiveTitle = item.title.toLowerCase();\n\n                return insensitiveTitle.includes(insensitiveQuery);\n              })\n              .map(todo => (\n                <li\n                  key={todo.id}\n                  className={`TodoList__item\n                  ${(checked && values.includes(todo.id))\n                  || (todo.completed === true)\n                  ? 'TodoList__item--checked' : 'TodoList__item--unchecked'}`}\n                >\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      checked={(checked && values.includes(todo.id))\n                      || (todo.completed === true)}\n                      onClick={() => {\n                        this.setState(state => ({\n                          checked: !state.checked,\n                          values: [...state.values, todo.id],\n                        }));\n                      }}\n                      readOnly\n                    />\n                    <p>{todo.title}</p>\n                  </label>\n\n                  <button\n                    className=\"\n              TodoList__user-button\n              TodoList__user-button--selected\n              button\n            \"\n                    type=\"button\"\n                    onClick={() => {\n                      selectUser(todo.userId);\n                    }}\n                  >\n                    {`User ${todo.userId}`}\n                  </button>\n                </li>\n              ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    userId: PropTypes.number,\n    title: PropTypes.string,\n  }).isRequired).isRequired,\n  selectUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUserbyId } from '../../api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n    userId: 0,\n  }\n\n  async componentDidMount() {\n    const person = await getUserbyId(this.props.userId);\n\n    this.setState({ user: person.data });\n  }\n\n  async componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevState.userId !== this.props.userId) {\n      const person = await getUserbyId(this.props.userId);\n\n      this.chooseNewUser(person.data);\n    }\n  }\n\n  chooseNewUser = (person) => {\n    this.setState({\n      user: person,\n      userId: person.id,\n    });\n  }\n\n  render() {\n    const { user } = this.state;\n\n    return (\n      <>\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>{`Selected user: ${user.id}`}</span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">{user.name}</h3>\n          <p className=\"CurrentUser__email\">{user.email}</p>\n          <p className=\"CurrentUser__phone\">{user.phone}</p>\n        </div>\n      </>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { getTodos } from './api';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    const tasks = await getTodos();\n\n    this.setState({ todos: tasks.data });\n  }\n\n  selectUser = (id) => {\n    this.setState({ selectedUserId: id });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList todos={todos} selectUser={this.selectUser} />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <>\n                <CurrentUser userId={selectedUserId} />\n                <button\n                  type=\"button\"\n                  onClick={() => {\n                    this.setState({\n                      selectedUserId: 0,\n                    });\n                  }}\n                >\n                  Clear\n                </button>\n              </>\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}